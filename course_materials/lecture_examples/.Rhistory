31.46, 28.81, 29.71), x18 = c(13.95348837, 40.01855288,
-8.199298585, 0.711368726, -5.820797907, -4.61297889, -12.9081477,
6.574523721, 3.227232538, -7.173447537, -1.787463271, 14.88859764,
19.84040624, 6.779661017, -7.568027211, -8.319685555, -4.396423249,
0.58456742, 6.819062379, 0, -0.594000594, -9.538724374, -8.494097322,
-4.247954688, -3.284416492, 0.939306358, 5.33285612, -4.587155963,
17.95529498, -8.294501398, 0.864553314, 1.553556827, -2.093397746,
-4.256965944, 2.829426031, -3.240740741, -1.478903871, -7.282563462,
-0.673249551, 0.74941452, 4.788470479, -0.754214729, -1.519892713,
5.628688153, 5.156854319, -1.098068913, 1.722817764, 2.308943089,
-8.423394787, 3.123915307)), row.names = c(NA, 50L), class = "data.frame")
e6<-data1[,c("x8", "x1","x2","x3","x4","x5","x6")]
data1 <- structure(list(Country = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1), Date = c(48,
49, 52, 53, 54, 57, 59, 60, 64, 65, 69, 71, 86, 87, 88, 92, 101,
102, 105, 106, 110, 113, 118, 119, 121, 123, 124, 125, 126, 127,
129, 132, 133, 136, 137, 143, 144, 148, 149, 151, 152, 155, 156,
157, 158, 161, 162, 166, 167, 168), x1 = c(0.014748522,
0.118574701, 0.014776643, 0.110949861, 0.01481079, 0.118697229,
0.109259581, 0.106920507, 0.09964718, 0.107359397, 0.100214624,
0.101336456, 0.084556183, 0.109388135, 0.049318414, 0.083084846,
0.101614654, 0.09898533, 0.08605765, 0.099262524, 0.097317145,
0.094441761, 0.088059271, 0.101287244, 0.102545664, 0.106297825,
0.097040955, 0.080330986, 0.103339081, 0.108313506, 0.100936735,
0.10794291, 0.11167398, 0.111364648, 0.108089542, 0.110835368,
0.112419189, 0.110474815, 0.112116887, 0.122428299, 0.114857692,
0.115030436, 0.119601122, 0.114017072, 0.114926991, 0.113645471,
0.117205805, 0.115805775, 0.11617135, 0.114326404), x2 = c(0.044647275,
0.053976585, 0.030403218, 0.044558117, 0.063132462, 0.103456438,
0.117170791, 0.104951921, 0.108145525, 0.107693444, 0.096528502,
0.095931022, 0.083300776, 0.080563349, 0.076819818, 0.084028311,
0.095892312, 0.096190825, 0.091091159, 0.090343147, 0.096242416,
0.085306606, 0.085667078, 0.09251297, 0.105269247, 0.095251763,
0.093446551, 0.096549008, 0.100387759, 0.101508899, 0.100509418,
0.107830747, 0.109448071, 0.110830736, 0.109078427, 0.109318996,
0.112848661, 0.110987973, 0.112196608, 0.115601933, 0.114478704,
0.116686745, 0.116382225, 0.113006561, 0.109417021, 0.114979708,
0.115397391, 0.115777083, 0.114273074, 0.111343996), x3 = c(25,
25, 41.67, 75, 88.89, 93.52, 93.52, 93.52, 93.52, 93.52, 93.52,
93.52, 90.74, 90.74, 90.74, 90.74, 90.74, 88.89, 88.89, 88.89,
88.89, 88.89, 88.89, 92.59, 92.59, 92.59, 92.59, 92.59, 92.59,
92.59, 92.59, 90.74, 90.74, 90.74, 90.74, 88.89, 87.96, 87.96,
87.96, 87.96, 87.96, 87.96, 87.96, 87.96, 87.96, 87.96, 87.96,
87.96, 87.96, 87.96), x4 = c(0, 0, 0, 0, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
x5 = c(4.815325122, 4.815325122, 4.815325122,
4.815325122, 4.815325122, 4.815325122, 4.815325122, 4.815325122,
4.815325122, 4.815325122, 4.815325122, 4.815325122, 4.815325122,
4.815325122, 4.815325122, 4.815325122, 4.815325122, 4.815325122,
4.815325122, 4.815325122, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309, 6.041347309, 6.041347309, 6.041347309,
6.041347309, 6.041347309), x6 = c(0.7935,
0.7303, 0.5763, 0.5331, 0.4907, 0.3064, 0.2461, 0.1939, 0.1127,
0.096, 0.0012, -0.0282, -0.2368, -0.2497, -0.2622, -0.3073,
-0.4152, -0.425, -0.4503, -0.461, -0.5089, -0.5376, -0.5856,
-0.5956, -0.6147, -0.6337, -0.6429, -0.652, -0.6779, -0.6863,
-0.7033, -0.7285, -0.7366, -0.7596, -0.7673, -0.8152, -0.8226,
-0.8511, -0.8582, -0.8817, -0.8897, -0.913, -0.9206, -0.9285,
-0.9366, -0.9632, -0.9714, -1.0053, -1.0137, -1.0223), x7 = c(38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38), X8 = c(-4.397966662, -6.304929628,
0.488928104, -6.304929628, 2.54486109, -3.296545249, 1.344450099,
3.782659735, -0.844822382, 4.83150399, -6.304929628, 2.159834672,
1.420876501, -3.354324242, 3.589037795, 1.061780955, 4.228123326,
-0.404162634, -5.056291726, 0.010801841, -5.328349718, -1.493660218,
-0.696633142, -4.105707617, -0.871840445, 5.29044444, -1.962123959,
0.586428005, 1.138495764, 1.753597336, 0.275856688, 2.375667683,
3.884202996, 1.723158621, -1.047778386, -2.310359726, 0.175022741,
-4.057753192, 1.331212028, -4.328358106, 2.086407315, -1.432959593,
-0.337455739, -1.618003031, -3.500966569, -0.620899578, -3.649420293,
-0.459085095, 2.257504544, 0.745875601), X9 = c(-4.302658422,
-6.110280589, 0.490125308, -6.110280589, 2.577519125, -3.242801379,
1.353528468, 3.855112975, -0.841263786, 4.950123801, -6.110280589,
2.183327935, 1.431018931, -3.298690566, 3.654221238, 1.067437852,
4.318781661, -0.403346996, -4.930588828, 0.010802424, -5.188881247,
-1.482560447, -0.694212278, -4.022565186, -0.868050937, 5.432889579,
-1.942999592, 0.58815086, 1.145001292, 1.769063124, 0.276237523,
2.404111465, 3.960624404, 1.738090643, -1.04230831, -2.28387527,
0.175175995, -3.976528721, 1.340112104, -4.236021695, 2.108324957,
-1.422741592, -0.336886997, -1.604983674, -3.440391694, -0.61897598,
-3.583631679, -0.45803291, 2.283179015, 0.748664182), X10 = c(0.022036057,
0.022099114, 0.022148854, 0.022295818, 0.022296321, 0.022417636,
0.022468635, 0.022471382, 0.022464479, 0.022474524, 0.022565,
0.022556508, 0.022628762, 0.022632952, 0.022636849, 0.022625484,
0.022663127, 0.022660331, 0.022713486, 0.022710519, 0.022745041,
0.022848741, 0.022858749, 0.022866118, 0.022865227, 0.022874749,
0.022874749, 0.022874749, 0.022874749, 0.022874749, 0.022873025,
0.022861229, 0.022866133, 0.022853027, 0.022850894, 0.022853874,
0.022850921, 0.022855289, 0.022853114, 0.022862262, 0.022861413,
0.022849419, 0.022846619, 0.022845453, 0.022850036, 0.022871213,
0.022874749, 0.022860246, 0.022859786, 0.022857052), x11 = c(0.02205167,
0.022114713, 0.022164428, 0.022311364, 0.022311864, 0.022433137,
0.022484114, 0.022486855, 0.022479932, 0.022489972, 0.022580409,
0.022571904, 0.022644075, 0.022648261, 0.022652155, 0.022640772,
0.022678364, 0.022675565, 0.022728696, 0.022725727, 0.022760221,
0.022863891, 0.022873875, 0.02288124, 0.022880342, 0.022889387,
0.022889387, 0.022889387, 0.022889387, 0.022889387, 0.022888096,
0.022876286, 0.022881185, 0.022868066, 0.02286593, 0.022868884,
0.022865929, 0.022870278, 0.0228681, 0.022877231, 0.022876379,
0.022864371, 0.022861568, 0.022860399, 0.022864979, 0.022886138,
0.022889387, 0.022875151, 0.022874688, 0.022871951), x12 = c(0.021513181,
0.021571753, 0.021617452, 0.02174688, 0.021747569, 0.021882247,
0.021932113, 0.021935407, 0.021929198, 0.021940171, 0.022036504,
0.022028441, 0.022112581, 0.02211688, 0.022121171, 0.022110325,
0.022152497, 0.022149788, 0.022207397, 0.022204502, 0.022237638,
0.022350023, 0.022361011, 0.022368394, 0.022367831, 0.022392916,
0.022392916, 0.022392916, 0.022385136, 0.022383687, 0.022381105,
0.022369664, 0.022375024, 0.022362253, 0.02236023, 0.022365686,
0.022362796, 0.022367793, 0.022365675, 0.022375336, 0.022374587,
0.022363052, 0.022360332, 0.022359293, 0.022363957, 0.022387616,
0.022392877, 0.022377085, 0.02237674, 0.022374056), x13 = c(0.021528877,
0.021587435, 0.021633108, 0.021762508, 0.021763194, 0.021897824,
0.021947669, 0.021950955, 0.021944726, 0.021955694, 0.022051985,
0.022043909, 0.022127962, 0.022132257, 0.022136544, 0.02212568,
0.022167799, 0.022165088, 0.022222671, 0.022219773, 0.022252881,
0.022365232, 0.022376196, 0.022383574, 0.022383005, 0.022407741,
0.022407741, 0.022407741, 0.022400273, 0.022398821, 0.022396232,
0.022384778, 0.022390134, 0.022377348, 0.022375323, 0.022380752,
0.02237786, 0.022382837, 0.022380717, 0.022390361, 0.022389608,
0.02237806, 0.022375337, 0.022374295, 0.022378955, 0.022402595,
0.022407741, 0.022392044, 0.022391696, 0.022389009), x14 = c(355.7064977,
355.7064977, 355.7064977, 355.7064977, 355.7064977, 355.7064977,
355.7064977, 366.871849, 366.871849, 366.871849, 366.871849,
366.871849, 436.6764361, 436.6764361, 436.6764361, 436.6764361,
343.7874609, 343.7874609, 343.7874609, 343.7874609, 343.7874609,
343.7874609, 343.7874609, 343.7874609, 351.4579307, 351.4579307,
351.4579307, 351.4579307, 351.4579307, 351.4579307, 351.4579307,
351.4579307, 351.4579307, 351.4579307, 351.4579307, 313.8276295,
313.8276295, 313.8276295, 313.8276295, 313.8276295, 313.8276295,
313.8276295, 313.8276295, 313.8276295, 313.8276295, 299.7095158,
299.7095158, 299.7095158, 299.7095158, 299.7095158), x15 = c(13,
13, 13, 13, 13, 13, 13, -1.5, -1.5, -1.5, -1.5, -1.5, -1.5,
-1.5, -1.5, -1.5, -1.5, -1.5, -1.5, -1.5, -1.5, -1.5, -1.5,
-5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5,
-5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5,
-5.5, -5.5, -5.5, -5.5, -5.5, -5.5, -5.5), x16 = c(2, 2,
2, 2, 2, 2, 2, 3.3, 3.3, 3.3, 3.3, 3.3, 1.5, 1.5, 1.5, 1.5,
1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 2.2, 2.2, 2.2, 2.2, 2.2,
2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 1.9, 1.9, 1.9, 1.9, 1.9,
1.9, 1.9, 1.9, 1.9, 1.9, 2.7, 2.7, 2.7, 2.7, 2.7), x17 = c(53.9,
75.47, 75.91, 75.91, 72, 61, 57.08, 57.06, 46.7, 43.35, 40.11,
43.83, 33.04, 35.28, 32.61, 27.99, 25.66, 25.81, 27.57, 27.57,
33.47, 31.77, 31.78, 30.43, 27.68, 27.94, 29.43, 28.08, 32.19,
29.52, 28, 24.84, 24.32, 24.74, 25.44, 22.99, 22.65, 22.28,
22.13, 21.51, 22.54, 22.37, 22.03, 23.27, 24.47, 26.12, 26.57,
31.46, 28.81, 29.71), x18 = c(13.95348837, 40.01855288,
-8.199298585, 0.711368726, -5.820797907, -4.61297889, -12.9081477,
6.574523721, 3.227232538, -7.173447537, -1.787463271, 14.88859764,
19.84040624, 6.779661017, -7.568027211, -8.319685555, -4.396423249,
0.58456742, 6.819062379, 0, -0.594000594, -9.538724374, -8.494097322,
-4.247954688, -3.284416492, 0.939306358, 5.33285612, -4.587155963,
17.95529498, -8.294501398, 0.864553314, 1.553556827, -2.093397746,
-4.256965944, 2.829426031, -3.240740741, -1.478903871, -7.282563462,
-0.673249551, 0.74941452, 4.788470479, -0.754214729, -1.519892713,
5.628688153, 5.156854319, -1.098068913, 1.722817764, 2.308943089,
-8.423394787, 3.123915307)), row.names = c(NA, 50L), class = "data.frame")
e6<-data1[,c("x8", "x1","x2","x3","x4","x5","x6")]
head(data1)
e6<-data1[,c("x8", "x1","x2","x3","x4","x5","x6")]
colnames(data1)
e6<-data1[,c("X8", "x1","x2","x3","x4","x5","x6")]
e6
est_tsdyn <- VECM(e6, lag = 8,  include = "both", estim = "ML", exogen = NULL)
est_tsdyn <- VECM(e6, lag = 2,  include = "both", estim = "ML", exogen = NULL)
est_tsdyn
est_tsdyn <- VECM(e6, lag = 5,  include = "both", estim = "ML", exogen = NULL)
est_tsdyn <- VECM(e6, lag = 4,  include = "both", estim = "ML", exogen = NULL)
est_tsdyn <- VECM(e6, lag = 3,  include = "both", estim = "ML", exogen = NULL)
mtcars
mtcars[which(mtcars$mpg>30),][order(mtcars[which(mtcars$mpg>30),c("mpg", "disp")])]
mtcars[which(mtcars$mpg>30),][order(mtcars[which(mtcars$mpg>30),c("mpg", "disp")], descending = TRUE),]
mtcars[which(mtcars$mpg>30),][order(mtcars[which(mtcars$mpg>30),c("mpg", "disp")], decreasing = TRUE),]
?order
library(readsas)
instsall.packages("readsas")
install.packages("readsas")
dat <- read.sas("/Users/gregryslik/Downloads/addasc_ds.sas7bdat")
install.package("sas7bdat")
install.packages("sas7bdat")
library(sas7bdat)
dat <- read.sas7bdat("/Users/gregryslik/Downloads/addasc_ds.sas7bdat")
head(dat)
View(dat)
dat$TRT01P
unique(dat$TRT01P)
unique(dat$TRT01PN)
unique(dat$QSSTAT)
unique(dat$QSREASND)
unique(dat$PARAMCD)
unique(dat$PARAMTYP)
unique(dat$PARAMN)
unique(dat$AVISIT)
unique(dat$AVISITN)
unique(dat$AVAL)
unique(dat$AVISIT)
unique(dat$AVISITN)
df1 <- data.frame(a=c(1,2,4,2))
df1
df2 <- data.frame(b=c(2,6))
df3 <- data.frame(c=c(2,4,3))
df4 <- data.frame(c=(1,2,4,3))
df4 <- data.frame(d=c(1,2,4,3))
df4
df3
mydf <- cbind.data.frame(df1, df2, df3, df4)
library(dplyr)
mydf <- cbind.fill(df1, df2, df3, df4)
install.packages("rowr")
mydf <- bind_cols(df1, df2, df3, df4)
?bind_cols
install.packages("gtools")
library(gtools)
mydf <- gtools::smartbind(df1, df2, df3, df4)
mydf
install.packages("qpcR")
library(qpcR)
qpcR
library(qpcR)
install.packages("qpcR")
library(qpcR)
mydf <- qpcR:::cbind.na(df1, df2, df3, df4)
mydf <- dplyr::full_join(df1, df2, df3, df4)
mydf <- dplyr::cbind.fill(df1, df2, df3, df4)
?rbind.fill
??rbind.fill
library(qpcr)
library(qpcR)
options(rgl.useNULL = TRUE)
library(rgl)
library(qpcR)
mydf <- qpcR:::cbind.na(df1, df2, df3, df4)
mydf
mydf <- qpcR:::cbind.na(df1, df2, df3, df4) %>%
replace_na(.,as.list(colMeans(.,na.rm=T)))
install.package("tidyr")
install.packages("tidyr")
library(tidyr)
mydf <- qpcR:::cbind.na(df1, df2, df3, df4) %>%
replace_na(.,as.list(colMeans(.,na.rm=T)))
mydf
mydf <- qpcR:::cbind.na(df1, df2, df3, df4,df5) %>%
replace_na(.,as.list(colMeans(.,na.rm=T)))
df1 <- data.frame(a=c(1,2,4,2))
df2 <- data.frame(b=c(2,6))
df3 <- data.frame(c=c(2,4,3))
df4 <- data.frame(d=c(1,2,4,3))
df5 <- data.frame(e=c(4,6,2))
mydf <- qpcR:::cbind.na(df1, df2, df3, df4,df5) %>%
replace_na(.,as.list(colMeans(.,na.rm=T)))
mydf
mydf <- qpcR:::cbind.na(df1, df2, df3, df4,df5) %>%
tidyr::replace_na(.,as.list(colMeans(.,na.rm=T)))
myd
mydf
id = c(rep(1:4,2),5:8)
pre = c(rep(10,4),rep(NA,4),rep(100,4))
post = c(rep(NA,4),rep(10,4),rep(100,4))
df = cbind(id,pre,post)
df
df
library(dplyr)
df %>% left_join(., df, by = "id")
head(df)
df<- as.data.frame(df)
df %>% left_join(., df, by = "id")
df %>% left_join(., df, by = "id") %>% select(id, pre.x, post.y)
df %>% left_join(., df, by = "id") %>% select(id, pre.x, post.y) %>%
drop_na()
library(dplyr)
df %>% left_join(., df, by = "id") %>% select(id, pre.x, post.y) %>% drop_na()
library(tidyverse)
df %>% left_join(., df, by = "id") %>% select(id, pre.x, post.y) %>% drop_na()
grps <- list(c('A1','B1'),
c('C1','D1'))
grp.names = c("Control", "Exp1", "EMPTY")
my_data$Group <- case_when(
my_data$Position %in% grps[[1]] ~ grp.names[1],
my_data$Position %in% grps[[2]] ~ grp.names[2]
)
my_data <- data.frame(matrix(ncol = 3, nrow = 4))
colnames(my_data) <- c('Position', 'Group', 'Data')
my_data[,1] <- c('A1','B1','C1','D1')
my_data[,3] <- c(1,2,3,4)
grps <- list(c('A1','B1'),
c('C1','D1'))
grp.names = c("Control", "Exp1", "EMPTY")
my_data$Group <- case_when(
my_data$Position %in% grps[[1]] ~ grp.names[1],
my_data$Position %in% grps[[2]] ~ grp.names[2]
)
my_data
my_data <- data.frame(matrix(ncol = 3, nrow = 4))
colnames(my_data) <- c('Position', 'Group', 'Data')
my_data[,1] <- c('A1','B1','C1','D1')
my_data[,3] <- c(1,2,3,4)
grps <- list(c('A1','B1'),
c('C1','D1'))
grp.names = c("Control", "Exp1", "EMPTY")
grps
grp_names
grp.names
mydata
my_data
my_data$Position
lapply(grps, function(x){ my_data$Position %in% x)
lapply(grps, function(x){ my_data$Position %in% x})
group_match <- lapply(grps, function(x){ my_data$Position %in% x})
?mapply
group_match
cbind_list(group_match)
cbind(group_match)
rbind(group_match)
rbindlist(group_match)
library(data.table)
rbindlist(group_match)
group_match
?lapply
sapply(grps, function(x){ my_data$Position %in% x})
sapply(grps, function(x){ my_data$Position %in% x})
matching_group_df <- sapply(grps, function(x){ my_data$Position %in% x})
?apply
apply(matching_group_df, 1, which(x == TRUE))
apply(matching_group_df, 1, TRUE))
apply(matching_group_df, 1, TRUE)
apply(matching_group_df, 1, function(x){x == TRUE})
apply(matching_group_df, 2, function(x){x == TRUE})
apply(matching_group_df, 2, function(x){which(x == TRUE)})
matching_group_df
apply(matching_group_df, 1, function(x){which(x == TRUE)})
grp.names[apply(matching_group_df, 1, function(x){which(x == TRUE)})]
selected_group <- apply(matching_group_df, 1, function(x){which(x == TRUE)})]
selected_group <- apply(matching_group_df, 1, function(x){which(x == TRUE)})
selected_group
my_data$Group <- grp.names[selected_group]
my_data
my_data <- data.frame(matrix(ncol = 3, nrow = 4))
colnames(my_data) <- c('Position', 'Group', 'Data')
my_data[,1] <- c('A1','B1','C1','D1')
my_data[,3] <- c(1,2,3,4)
grps <- list(c('A1','B1'),
c('C1','D1'))
grp.names = c("Control", "Exp1", "EMPTY")
my_data$Group <- case_when(
my_data$Position %in% grps[[1]] ~ grp.names[1],
my_data$Position %in% grps[[2]] ~ grp.names[2]
)
my_data <- data.frame(matrix(ncol = 3, nrow = 4))
colnames(my_data) <- c('Position', 'Group', 'Data')
my_data[,1] <- c('A1','B1','C1','D1')
my_data[,3] <- c(1,2,3,4)
grps <- list(c('A1','B1'),
c('C1','D1'))
grp.names = c("Control", "Exp1", "EMPTY")
my_data$Group <- case_when(
my_data$Position %in% grps[[1]] ~ grp.names[1],
my_data$Position %in% grps[[2]] ~ grp.names[2]
)
library(dplyr)
my_data$Group <- case_when(
my_data$Position %in% grps[[1]] ~ grp.names[1],
my_data$Position %in% grps[[2]] ~ grp.names[2]
)
my_data$Group
my_data$Position
grp.names
grps
grps
matching_group_df <- sapply(grps, function(x){ my_data$Position %in% x})
selected_group <- apply(matching_group_df, 1, function(x){which(x == TRUE)})
my_data$Group <- grp.names[selected_group]
my_data
matching_group_df
type(matching_group_df)
typeof(matching_group_df)
is.data.frame(matching_group_df)
is.matrix(matching_group_df)
selected_group
grp.names[selected_group]
library(fmsb)
oddsratio(5,15,3,30)
raw_data <- read.csv("~/Dropbox/StanfordLearning/StatsCourse/Lectures/Lecture3/Lecture_Material/Code/LogisticRegressionData.csv")
raw_data
my_model <- glm(Sick ~ Smoker, family = binomial(link = 'logit'), data = raw_data)
summary(my_model)
my_model2 <- glm(Sick ~ ., family = binomial(link = 'logit'), data = raw_data)
summary(my_model2)
exp(1.198)
exp(-0.9784  )
exp( 0.3672 )
exp( 2*0.3672 )
df <- data.frame(arbitrary=matrix(data = 1:3,nrow = 3))
column_numeric <- list(list(1,2,3),list(4,5,6),list(7,8,9))
column_char <- list(list('A','B','C'),list('B','C','D'),list('D','G','J'))
df$column_numeric <- column_numeric
df$column_char <- column_char
df$arbitrary <- NULL
df
result <- apply(df, margin = 1, FUN(current_row) = {
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
result <- apply(df, margin = 1, FUN = function(current_row){
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
result <- apply(df, MARGIN = 1, FUN = function(current_row){
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
result <- apply(df, MARGIN = 1, FUN = function(current_row){
#print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
print(current_row)
result <- apply(df, MARGIN = 2, FUN = function(current_row){
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
result <- apply(df, MARGIN = 1, FUN = function(current_row){
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
result
df$desired_column <- apply(df, MARGIN = 1, FUN = function(current_row){
print(current_row)
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
df$desired_column <- apply(df, MARGIN = 1, FUN = function(current_row){
paste(mapply(FUN = function(x,y){paste(x, "*", y,sep="")},df[1,1], df[1,2]), collapse = ' + ')
})
df
install.packages("whitening")
mymat <- matrix(c(20,-5, 8,2,-6,3,6,-4), nrow= 2)
mymat
library(whitening)
whiten(mymat)
?mymat
?whiten
whiten(t(mymat))
whiten(mymat)
?whiten
whiten(t(mymat), center = TRUE)
whiten(t(mymat), center = TRUE, method = "ZCA")
whiten(t(mymat), center = TRUE, method = "PCA")
whiten(t(mymat), center = TRUE, method = "Cholesky")
View(my_model_woCTP_90_3)
mymat <- matrix(c(20,-5, 8,2,-6,3,6,-4), nrow= 2)
library(whitening)
whiten(mymat)
mymat
whiten(t(mymat))
whiten(t(mymat), center = TRUE)
whiten(t(mymat), center = TRUE, method = "ZCA")
whiten(t(mymat), center = TRUE, method = "Cholesky")
whiten(t(mymat), method = "Cholesky")
whiten(t(mymat), method = "ZCA")
whiten(t(mymat), method = "ZCA-cor")
whiten(t(mymat), method = "PCA")
whiten(t(mymat),center = TRUE, method = "PCA")
whiten(t(mymat),center = TRUE, method = "PCA-cor")
whiten(t(mymat),center = TRUE, method = "Chol-prec")
whiten(t(mymat),center = TRUE, method = "Chol-prec"")
whiten(t(mymat),center = TRUE, method = "Chol-prec")
whiten(t(mymat),center = TRUE, method = "Chol-prec")
whiten(t(mymat),center = TRUE, method = "Cholesky")
mymat
whiten(mymat,center = TRUE, method = "Cholesky")
whiten(t(mymat),center = TRUE, method = "Cholesky")
whiten(t(mymat),center = TRUE, method = "Cholesky")
whiten(t(mymat),center = TRUE, method = "PCA")
whiten(t(mymat),center = TRUE, method = "Cholesky")
whiten(t(mymat),center = TRUE, method = "ZCA")
whiten(t(mymat),center = TRUE, method = "PCA")
library(whitening)
mymat <- matrix(c(20,-5, 8,2,-6,3,6,-4), nrow= 2)
mymat
whiten(t(mymat),center = TRUE, method = "Cholesky")
whiten(t(mymat),center = TRUE, method = "ZCA")
whiten(t(mymat),center = TRUE, method = "PCA")
data("iris")
data("iris")
X = as.matrix(iris[,1:4])
d = ncol(X) # 4
n = nrow(X) # 150
colnames(X) # "Sepal.Length" "Sepal.Width"  "Petal.Length" "Petal.Width"
Z.ZCAcor = whiten(X, method="ZCA-cor")
zapsmall( cov(Z.ZCAcor) )
Z.ZCAcor = whiten(X, method="ZCA")
zapsmall( cov(Z.ZCAcor) )
setwd("~/gitRepos/osu_cse3521_spring2022/course_materials/lecture_examples")
getwd()
rawData <- read.csv("data.csv", stringsAsFactors = FALSE)
View(rawDta)
View(rawData)
?read.csv
rawData <- read.csv("data.csv", stringsAsFactors = FALSE, header = FALSE)
Z.ZCAcor = whiten(rawData, method="ZCA")
rawData
typeof(rawData)
Z.ZCAcor = whiten(as.matrix(rawData), method="ZCA")
Z.ZCAcor
dim(Z.ZCAcor)
zapsmall( cov(Z.ZCAcor) )
Z.ZCAcor = whiten(t(as.matrix(rawData)), method="ZCA")
